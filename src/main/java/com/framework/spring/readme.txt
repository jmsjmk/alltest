====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
0.aop的配置方式很多
不管以什么方式配置,都是要讲一段功能放入在合适的切入点里面.
1.拦截器的实现方式.(MyIntercepter)

====================================================================================
1.spring(动态数据源,数据源切换,用哪个就指定那个源就行了比较简单)----(动态选择数据源:::org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.determineTargetDataSource)
    1.1 配置文件配置,手动指定使用那个数据源,通过threadlocal设置
       eg:老支付->spring-payment-mybatis.xml 里面的配置，使用时候： MultipleDataSource.setDataSource(EnumDataSource.PAYMENT_SLAVE);
       xml里面警告红色说明bean的定义不再当前配置文件中，但是在项目运行的时候一定可以找到.

    1.2 套路一样的自定义注解的方式(cheyipai)定义到方法上面.这个是怎么样的一个操作呢?
        拦截mybatis的mapper在最开始拦截，因为方法在执行的时候肯定会选择出来一个数据源,所以最开始基于threadlocal设置一个属性。然后在选择
        数据源的时候命中就可以了.


====================================================================================
2.spring事务处理器,有两种配置方式,一种是基于配置的方式，一种是基于注解的方式.
aop 的配置方式很多, xml,注解, 对应的配置类，
1.普通的pojo,没有任何注解,配置文件里面的before, after方法等.
com.framework.spring.aop.aop3.SecondAdviceTest

2.如何实现了特殊的方法,方法里面有对应的重写方法，其实就标记了顺序
MethodBeforeAdvice
MethodInterceptor

其实最简单的：还是 MethodInterceptor,
他可以拿到任何你想要的信息， 包括各种joinpoint等方法.


3.配置方式很多搞定一种就行了.简单的书写代码

